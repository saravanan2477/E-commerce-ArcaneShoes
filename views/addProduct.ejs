<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>login</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="Stylesheet" href="/static/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        .error-message {
            color: red;
        }
    </style>
</head>

<body style="background: #f0f0f0;">

    <div class="container" style="padding: 2%;">
        <div class="row justify-content-center">

            <div class="col-md-4">
                <% if(typeof message !== 'undefined') { %>
                <div class="alert alert-danger text-center">
                    <%= message %>
                </div>
                <% } %>
            <!-- <% if(typeof loginmessage !== 'undefined') { %>
                <div class="alert alert-success text-center">
                    <%= loginmessage %>
                </div>
                <% } %> -->
                <div class="card">

                    <div class="card-body">
                        <!-- enctype="multipart/form-data" -->
                        <h1 class="text-center text-primary">Add Product</h1>
                        <form action="/addproduct" method="POST"  onsubmit="return validateForm()" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="productname" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="productname" name="productname" >
                                <div id="productnameError" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-select" id="category" name="category" >
                                    <option value="">Select Category</option>
                                    <% if(categories.length> 0) { %>
                                        <% categories.forEach( categorie=> { %>
                                            <option value="<%= categorie._id %>"><%= categorie.category %></option>
                                            <% }); %>
                                                <% } %>
                                </select>
                                <div id="categoryError" class="error-message"></div>
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                <input type="number" class="form-control" id="price" name="price" >
                                <div id="priceError" class="error-message"></div>
                            </div>
                           
                            <div class="mb-3">
                                <label for="discription" class="form-label">Discription</label>
                                <input type="text" class="form-control" id="discription" name="disription" >
                                <div id="discriptionError" class="error-message"></div>
                            </div>
                            <div class="mb-3">
                                <label for="UrunImage" class="form-label">Product Image</label>
                                <input name="img" type="file"  multiple class="form-control w-100" id="image" >
                                <div id="image-container" class="mb-5 mt-5"></div> 
                                <div id="cropper-container" class="mt-3 mb-5"></div>
                                <br>  <span id="validationMessage" style="color: red;"></span>
                            </div>
                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <input type="number" class="form-control" id="stock" name="stock" min="1" >
                                <div id="stockError" class="error-message"></div>
                            </div>
                            <div class="mb-3">
                                <label for="Brand" class="form-label">Brand</label>
                                <input type="text" class="form-control" id="Brand" name="Brand" min="1" >
                                <div id="BrandError" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label for="isListed" class="form-label">IsListed</label>
                                <select class="form-select" id="isListed" name="isListed" >
                                    <option value="true">True</option>
                                    <option value="false">False</option>
                                </select>
                            </div> 
                            <div class="text-center login-button mb-4">
                                <button type="submit" class="btn btn-primary w-100">Add</button>
                                <a href="/productmanagement" class="btn btn-primary w-100 mt-2">Go Back</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        function validateForm() {
            var productname = document.getElementById('productname').value.trim();
            var category = document.getElementById('category').value.trim();
            var price = document.getElementById('price').value.trim();
            var discription = document.getElementById('discription').value.trim();
            var stock = document.getElementById('stock').value.trim();
            var isValid = true;
    
            // Product name validation
            if (productname === '') {
                document.getElementById('productnameError').innerText = 'Please enter the product name';
                isValid = false;
            } else if (productname.split(/\s+/).length > 50) {
                document.getElementById('productnameError').innerText = 'Product name should be below 50 words';
                isValid = false;
            } else {
                document.getElementById('productnameError').innerText = '';
            }
    
            // Category validation
            if (category === '') {
                document.getElementById('categoryError').innerText = 'Please enter the category';
                isValid = false;
            } else {
                document.getElementById('categoryError').innerText = '';
            }
    
            // Price validation
            if (price === '') {
                document.getElementById('priceError').innerText = 'Please enter the price';
                isValid = false;
            } else if (isNaN(price)) {
                document.getElementById('priceError').innerText = 'Price should only contain numbers';
                isValid = false;
            } else {
                document.getElementById('priceError').innerText = '';
            }
    
            // Description validation
            if (discription === '') {
                document.getElementById('discriptionError').innerText = 'Please enter the description';
                isValid = false;
            } else if (discription.split(/\s+/).length > 50) {
                document.getElementById('discriptionError').innerText = 'Description should be below 50 words';
                isValid = false;
            } else {
                document.getElementById('discriptionError').innerText = '';
            }
    
            // Stock validation
            if (stock === '') {
                document.getElementById('stockError').innerText = 'Please enter the stock';
                isValid = false;
            } else if (isNaN(stock)) {
                document.getElementById('stockError').innerText = 'Stock should only contain numbers';
                isValid = false;
            } else {
                document.getElementById('stockError').innerText = '';
            }
            if (Brand === '') {
                document.getElementById('BrandError').innerText = 'Please enter the Brand';
                isValid = false;
            } else if (Brand.split(/\s+/).length > 30) {
                document.getElementById('BrandError').innerText = 'Brand should be below 30 words';
                isValid = false;
            } else {
                document.getElementById('BrandError').innerText = '';
            }
    
            return isValid;
        }
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const imageContainer = document.getElementById('image-container');
        let croppers = [];
        let croppedImagesData = []; // Array to store cropped image data
        let isSaveClicked = false; // Flag to track if the Save button is clicked
      
        document.getElementById('image').addEventListener('change', (event) => {
          const files = event.target.files;
      
          for (const file of files) {
            const reader = new FileReader();
      
            reader.onload = (event) => {
              const image = new Image();
              image.src = event.target.result;
      
              image.onload = () => {
                const containerDiv = document.createElement('div');
                containerDiv.className = 'image-container';
      
                const imageElement = document.createElement('img');
                imageElement.src = image.src;
                containerDiv.appendChild(imageElement);
      
                // Set a fixed height for the container
                containerDiv.style.height = '150px';
      
                // Create a new Cropper for each image with a fixed aspect ratio and zooming enabled
                const cropper = new Cropper(imageElement, {
                  aspectRatio: 2/2, // Set the aspect ratio (e.g., 4:3)
                  viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to aspect ratio, 2: restrict to canvas)
                  zoomable: true, // Enable zooming
                  zoomOnWheel: true, // Enable zooming using the mouse wheel
                  zoomOnTouch: true, // Enable zooming on touch devices
                  wheelZoomRatio: 0.1, // Set the ratio of the zoom when using the mouse wheel
                  touchZoomRatio: 0.1, // Set the ratio of the zoom on touch devices
                });
      
                // Create a "Save" button for each image
                const saveButton = document.createElement('button');
                saveButton.className = 'btn btn-success save-button';
                saveButton.textContent = 'Save';
                saveButton.addEventListener('click', () => {
                  // Get the cropped image data for the specific cropper
                  const croppedCanvas = cropper.getCroppedCanvas();
                  const croppedImageData = croppedCanvas.toDataURL('image/jpeg');
      
                  // Store cropped image data in the array
                  croppedImagesData.push(croppedImageData);
      
                  // Optionally, you can remove the "Save" button after saving
                  containerDiv.removeChild(saveButton);
      
                  // Set the flag to indicate that Save button is clicked
                  isSaveClicked = true;
                });
      
                // Create a "Remove" button for each image
                const removeButton = document.createElement('button');
                removeButton.className = 'btn btn-danger remove-button';
                removeButton.textContent = 'Remove';
                removeButton.addEventListener('click', () => {
                  // Remove the corresponding image and cropper
                  const index = croppers.indexOf(cropper);
                  if (index !== -1) {
                    croppers.splice(index, 1);
                    croppedImagesData.splice(index, 1);
                  }
                  containerDiv.remove();
      
                  // Reset the flag if there are no images left
                  if (croppers.length === 0) {
                    isSaveClicked = false;
                  }
                });
      
                containerDiv.appendChild(saveButton);
                containerDiv.appendChild(removeButton);
      
                imageContainer.appendChild(containerDiv);
                croppers.push(cropper);
              };
            };
      
            reader.readAsDataURL(file);
          }
        });
      
        // Handle form submission (for adding product)
        document.querySelector('form').addEventListener('submit', async (event) => {
          // Prevent form submission if Save button is not clicked
          if (!isSaveClicked) {
            event.preventDefault();
            // Show validation message
            document.getElementById('validationMessage').textContent = 'Please save the image first.';
          } else {
            // Add the cropped image data to the form data
            croppedImagesData.forEach((croppedImageData, index) => {
              const hiddenInput = document.createElement('input');
              hiddenInput.type = 'hidden';
              hiddenInput.name = `croppedImages[${index}]`;
              hiddenInput.value = croppedImageData;
              document.querySelector('form').appendChild(hiddenInput);
            });
      
            // Optionally, you can also reset the croppers and image containers
            resetCroppersAndContainers();
          }
        });
      
        // Function to reset croppers and containers
        function resetCroppersAndContainers() {
          // Reset the croppers array
          croppers = [];
      
          // Remove all child elements from the imageContainer
          while (imageContainer.firstChild) {
            imageContainer.removeChild(imageContainer.firstChild);
          }
      
          // Clear the file input
          const fileInput = document.getElementById('image');
          fileInput.value = '';
      
          // Clear the cropped image data array
          croppedImagesData = [];
      
          // Reset the Save button click flag
          isSaveClicked = false;
      
          // Clear the validation message
          document.getElementById('validationMessage').textContent = '';
        }
      </script>
</body>

</html>






